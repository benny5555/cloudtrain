[build-system]
requires = ["hatchling"]
build-backend = "hatchling.build"

[project]
name = "cloudtrain"
version = "0.1.0"
description = "Universal cloud training API for machine learning jobs across multiple cloud providers"
readme = "README.md"
license = {file = "LICENSE"}
authors = [
    {name = "CloudTrain Team", email = "team@cloudtrain.ai"},
]
maintainers = [
    {name = "CloudTrain Team", email = "team@cloudtrain.ai"},
]
keywords = [
    "machine-learning",
    "cloud",
    "training",
    "aws",
    "azure",
    "gcp",
    "sagemaker",
    "mlops",
]
classifiers = [
    "Development Status :: 3 - Alpha",
    "Intended Audience :: Developers",
    "Intended Audience :: Science/Research",
    "License :: OSI Approved :: Apache Software License",
    "Operating System :: OS Independent",
    "Programming Language :: Python :: 3",
    "Programming Language :: Python :: 3.9",
    "Programming Language :: Python :: 3.10",
    "Programming Language :: Python :: 3.11",
    "Programming Language :: Python :: 3.12",
    "Topic :: Scientific/Engineering :: Artificial Intelligence",
    "Topic :: Software Development :: Libraries :: Python Modules",
    "Typing :: Typed",
]
requires-python = ">=3.9"
dependencies = [
    "pydantic>=2.0.0",
    "pydantic-settings>=2.0.0",  # For BaseSettings
    "aiohttp>=3.8.0",
    "typing-extensions>=4.0.0",
    "python-dotenv>=1.0.0",
    "rich>=13.0.0",  # For beautiful console output
    "click>=8.0.0",  # For CLI interface
    "pyyaml>=6.0.0",  # For YAML configuration files
]

[project.optional-dependencies]
aws = [
    "boto3>=1.26.0",
    "sagemaker>=2.200.0",
]
azure = [
    "azure-ai-ml>=1.12.0",
    "azure-identity>=1.15.0",
]
gcp = [
    "google-cloud-aiplatform>=1.40.0",
    "google-auth>=2.20.0",
]
alibaba = [
    "alibabacloud-pai-dlc20201203>=1.0.0",
]
tencent = [
    "tencentcloud-sdk-python>=3.0.0",
]
all = [
    "cloudtrain[aws,azure,gcp,alibaba,tencent]",
]
dev = [
    "pytest>=7.0.0",
    "pytest-asyncio>=0.21.0",
    "pytest-cov>=4.0.0",
    "pytest-mock>=3.10.0",
    "black>=23.0.0",
    "isort>=5.12.0",
    "pytype>=2023.0.0",
    "ruff>=0.1.0",
    "pre-commit>=3.0.0",
]
docs = [
    "mkdocs>=1.5.0",
    "mkdocs-material>=9.0.0",
    "mkdocstrings[python]>=0.23.0",
]
test = [
    "pytest>=7.0.0",
    "pytest-asyncio>=0.21.0",
    "pytest-cov>=4.0.0",
    "pytest-mock>=3.10.0",
    "httpx>=0.24.0",  # For testing async HTTP
    "respx>=0.20.0",  # For mocking HTTP requests
]

[project.urls]
Homepage = "https://github.com/cloudtrain/cloudtrain"
Documentation = "https://cloudtrain.readthedocs.io"
Repository = "https://github.com/cloudtrain/cloudtrain"
Issues = "https://github.com/cloudtrain/cloudtrain/issues"
Changelog = "https://github.com/cloudtrain/cloudtrain/blob/main/CHANGELOG.md"

[project.scripts]
cloudtrain = "cloudtrain.cli:main"

[tool.hatch.build.targets.wheel]
packages = ["src/cloudtrain"]

[tool.hatch.build.targets.sdist]
include = [
    "/src",
    "/docs",
    "/examples",
    "/README.md",
    "/LICENSE",
    "/CHANGELOG.md",
]

# Black configuration
[tool.black]
line-length = 88
target-version = ['py39']
include = '\.pyi?$'
extend-exclude = '''
/(
  # directories
  \.eggs
  | \.git
  | \.hg
  | \.mypy_cache
  | \.tox
  | \.venv
  | build
  | dist
)/
'''

# isort configuration
[tool.isort]
profile = "black"
multi_line_output = 3
line_length = 88
known_first_party = ["cloudtrain"]
known_third_party = ["pydantic", "aiohttp", "boto3", "azure", "google"]

# Pytype configuration
[tool.pytype]
python_version = "3.12"
inputs = ["src/cloudtrain"]
exclude = ["**/*_test.py", "**/*_integration_test.py"]



# Ruff configuration
[tool.ruff]
target-version = "py39"
line-length = 88
select = [
    "E",  # pycodestyle errors
    "W",  # pycodestyle warnings
    "F",  # pyflakes
    "I",  # isort
    "B",  # flake8-bugbear
    "C4", # flake8-comprehensions
    "UP", # pyupgrade
]
ignore = [
    "E501",  # line too long, handled by black
    "B008",  # do not perform function calls in argument defaults
    "C901",  # too complex
]

[tool.ruff.per-file-ignores]
"__init__.py" = ["F401"]
"**/*_test.py" = ["B011"]
"**/*_integration_test.py" = ["B011"]

# Pytest configuration
[tool.pytest.ini_options]
minversion = "7.0"
addopts = "-ra -q --strict-markers --strict-config --cov=src/cloudtrain --cov-report=term-missing --cov-report=html:htmlcov --cov-fail-under=80"
testpaths = ["src"]
python_files = ["test_*.py", "*_test.py"]
python_classes = ["Test*"]
markers = [
    "unit: marks tests as unit tests",
    "integration: marks tests as integration tests",
    "slow: marks tests as slow running tests",
    "aws: marks tests that require AWS credentials",
    "azure: marks tests that require Azure credentials",
    "gcp: marks tests that require GCP credentials",
]
python_functions = ["test_*"]
asyncio_mode = "auto"

# Coverage configuration
[tool.coverage.run]
source = ["src/cloudtrain"]
omit = [
    "*/*_test.py",
    "*/*_integration_test.py",
    "*/__pycache__/*",
]

[tool.coverage.report]
exclude_lines = [
    "pragma: no cover",
    "def __repr__",
    "if self.debug:",
    "if settings.DEBUG",
    "raise AssertionError",
    "raise NotImplementedError",
    "if 0:",
    "if __name__ == .__main__.:",
    "class .*\\bProtocol\\):",
    "@(abc\\.)?abstractmethod",
]
show_missing = true
precision = 2

[tool.coverage.html]
directory = "htmlcov"
